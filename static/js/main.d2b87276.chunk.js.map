{"version":3,"sources":["components/connection.jsx","components/history.jsx","components/listen.jsx","components/emitter.jsx","components/ack.jsx","App.jsx","index.js"],"names":["Connection","connData","createConnection","eventsToListenFor","emitTo","useState","formValid","setFormValid","serverUrl","setServerUrl","config","setConfig","useEffect","server","Alert","variant","show","errors","length","join","Form","onSubmit","e","preventDefault","stopPropagation","JSON","parse","console","log","Row","className","Col","Control","required","value","placeholder","type","onChange","target","as","Text","Button","block","disabled","loading","href","History","data","title","stack","channels","clearHistory","emitBack","items","map","item","ListGroup","Item","sm","date","toLocaleTimeString","Badge","channel","size","onClick","emitButtonClick","stringify","toISOString","Listen","listeners","addListener","listenHistory","setChannel","formValidation","setFormValidation","getChannelMessages","filter","listenerBoxes","index","noValidate","validated","trim","v","includes","Emitter","emitToChannels","addEmitTo","emitData","emitHistory","emitChannel","setEmitChannel","emitText","setEmitText","emitDataJson","setEmittDataJson","newEmitter","setNewEmitter","emitFormErrors","setEmitFormErrors","eventOptions","xs","dataToEmit","error","Check","id","label","checked","Ack","ackHistory","App","socket","setSocket","isReady","setIsReady","isReadyRef","useRef","current","connected","setConnData","appConfig","setAppConfig","setEventsToListenFor","listenTo","setListenTo","setEmitTo","setEmitHistory","setListenHistory","setAckHistory","forEach","channelsToAdd","push","on","response","d","Date","key","toLocaleString","dataType","i","url","socketId","hashObj","listen","emit","window","location","hash","btoa","setHash","atob","split","Container","Tabs","defaultActiveKey","Tab","eventKey","ack","store","toUTCString","Modal","backdrop","centered","Header","Title","Body","io","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2b87276.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Form, Col, Button, Alert } from 'react-bootstrap';\n\nexport default function Connection({ connData, createConnection, eventsToListenFor, emitTo }) {\n  const [formValid, setFormValid] = useState([]);\n  const [serverUrl, setServerUrl] = useState([]);\n  const [config, setConfig] = useState();\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    try {\n      JSON.parse(config);\n    } catch (e) {\n      console.log('cannot parse config json', e);\n      setFormValid(() => [e]);\n      return;\n    }\n\n    setFormValid(() => []);\n    createConnection(serverUrl, config);\n  }\n\n  useEffect(() => {\n    setConfig(() => connData.config);\n    setServerUrl(() => connData.server);\n  }, [connData]);\n\n  return (\n    <>\n      <Alert variant=\"danger\" show={(connData.errors).length > 0 || formValid.length > 0}>\n        {connData.errors.join(', ')} {formValid.join(', ')}\n      </Alert>\n\n      <Form onSubmit={onFormSubmit}>\n        <Form.Row className=\"mb-2\">\n          <Col>\n            <Form.Control required value={serverUrl} placeholder=\"server url\" type=\"url\" onChange={(e) => setServerUrl(e.target.value)} />\n          </Col>\n        </Form.Row>\n        <Form.Row className=\"mb-2\">\n          <Col>\n            <Form.Control as=\"textarea\" placeholder=\"JSON config\" value={config} onChange={(e) => setConfig(e.target.value)} />\n          </Col>\n        </Form.Row>\n        <Form.Row className=\"mt-2\">\n          <Col>\n            <Form.Text className=\"mb-2\">\n              <strong>Listen to</strong>: {eventsToListenFor.join(', ')} <strong>Emit to</strong>: {emitTo.join(', ')}\n            </Form.Text>\n            <Button variant=\"success\" type=\"submit\" block disabled={connData.loading}>{connData.loading ? 'Connecting...' : 'Connect'}</Button>\n            <div className=\"mt-3 text-center text-warning\">\n              This uses socket.io version 3 and above. For version 2.x use the previous version of socketio-client-tool <a href=\"v1/\">here</a>.\n            </div>\n          </Col>\n        </Form.Row>\n      </Form>\n    </>\n  )\n}\n","import { Button, ListGroup } from 'react-bootstrap'\nimport { Col, Row, Badge } from 'react-bootstrap';\nimport { BsTrash } from 'react-icons/bs';\n\nexport default function History({ data, title, stack, channels, clearHistory, emitBack }) {\n  const emitButtonClick = (e, item) => {\n    if (typeof emitBack === 'function') {\n      emitBack(item.channel, item.data);\n    }\n  }\n\n  const items = data.map((item) => {\n    return (\n      <ListGroup.Item key={item.date.toISOString() + '--' + item.channel}>\n        <Row>\n          <Col sm={4}>\n            <small>{item.date.toLocaleTimeString()}</small> <br /> <Badge variant=\"info\">{item.channel}</Badge>\n          </Col>\n          <Col>\n            <div className=\"float-right\">\n              <Button className={typeof emitBack !== 'function' ? 'd-none': ''} size=\"sm\" variant=\"warning\" onClick={e => emitButtonClick(e, item)}>emit</Button>\n            </div>\n            <pre>{typeof item.data === \"string\" ? item.data : JSON.stringify(item.data, null, 2)}</pre>\n          </Col>\n        </Row>\n      </ListGroup.Item>\n    );\n  });\n\n  const clearHistoryClick = (e) => {\n    clearHistory(stack, channels);\n  }\n\n  return (\n    <div>\n      <div className=\"mt-4 histories\">\n        <h3>\n          {title}\n          <Button size=\"sm\" onClick={clearHistoryClick} className={items.length > 0 ? \"ml-2 \" : \"d-none\" } variant=\"danger\"><BsTrash className=\"mr-2\" />clear</Button>\n          </h3>\n        <ListGroup variant=\"flush rounded text-white\">\n          {items}\n        </ListGroup>\n      </div>\n    </div>\n  );\n}","import { useState } from \"react\";\nimport History from './history.jsx';\nimport { Form, Button, Col, Alert } from 'react-bootstrap';\n\nexport default function Listen({ listeners, addListener, listenHistory, clearHistory }) {\n\n  const [channel, setChannel] = useState('');\n  const [formValidation, setFormValidation] = useState([]);\n\n  const getChannelMessages = (channel) => {\n    return listenHistory.filter(item => channel === item.channel);\n  }\n\n  const listenerBoxes = listeners.map((item, index) => {\n    return (\n      <History key={index} data={getChannelMessages(item)} title={item} stack=\"listen\" channels={[item]} clearHistory={clearHistory} />\n    );\n  });\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n    addListener([channel]);\n    setChannel('');\n  }\n\n  const channelTextBoxChange = e => {\n    setChannel(e.target.value.trim());\n    setFormValidation(v => []);\n    if (listeners.includes(e.target.value)) {\n      setFormValidation(v => [...v, 'Event already exists']);\n    }\n  }\n\n  return (\n    <div>\n      <div>\n        <Alert variant=\"danger\" show={(formValidation).length > 0}>\n          {formValidation.join(', ')}\n        </Alert>\n        <Form onSubmit={onFormSubmit} noValidate validated={formValidation.length === 0}>\n          <Form.Row className=\"mb-2\">\n            <Col>\n              <Form.Control placeholder=\"listen to a new event...\" value={channel} onChange={channelTextBoxChange} />\n            </Col>\n            <Col>\n              <Button variant=\"success\" type=\"submit\" block disabled={formValidation.length !== 0 || channel.length < 1}>Add</Button>\n            </Col>\n          </Form.Row>\n        </Form>\n      </div>\n      <h3>Listening to</h3>\n      {listenerBoxes}\n    </div>\n  );\n}","import { useState } from 'react';\nimport { Form, Col, Button, Alert } from 'react-bootstrap';\nimport History from './history.jsx';\n\nexport default function Emitter({ emitToChannels, addEmitTo, emitData, emitHistory, clearHistory, stack }) {\n  const [emitChannel, setEmitChannel] = useState('socketio-client');\n  const [emitText, setEmitText] = useState('');\n  const [emitDataJson, setEmittDataJson] = useState(false);\n  const [newEmitter, setNewEmitter] = useState('');\n  const [emitFormErrors, setEmitFormErrors] = useState([]);\n\n  const onEmitDataSubmit = (e) => {\n    e.preventDefault();\n\n    let dataToEmit = emitText;\n\n    if (emitDataJson === true) {\n      try {\n        dataToEmit = JSON.parse(emitText);\n      } catch (error) {\n        // setEmitFormErrors((items) => [...items, `Failed to parse JSON data: ${error}`]);\n        setEmitFormErrors(() => [`Failed to parse JSON data: ${error}`]);\n        return;\n      }\n    }\n    setEmitText(() => '');\n    setEmitFormErrors(() => []);\n    emitData(emitChannel, dataToEmit);\n  }\n\n  const onAddEmitterSubmit = (e) => {\n    e.preventDefault();\n    addEmitTo(newEmitter);\n    setNewEmitter('');\n    setEmitChannel(() => newEmitter);\n  }\n\n  const eventOptions = emitToChannels.map((item) => {\n    return (\n      <option key={item} value={item}>{item}</option>\n    );\n  });\n\n  return (\n    <div>\n      <Form onSubmit={onAddEmitterSubmit} className=\"mb-3\">\n        <Form.Row>\n          <Col xs={4}>\n            <Form.Control size=\"sm\" value={newEmitter} onChange={(e) => setNewEmitter(e.target.value)} placeholder=\"Event name\" />\n          </Col>\n          <Col xs={2}>\n            <Button size=\"sm\" variant=\"info\" type=\"submit\" block>Add</Button>\n          </Col>\n        </Form.Row>\n      </Form>\n\n      <hr />\n\n      <Form onSubmit={onEmitDataSubmit}>\n        <Alert variant=\"danger\" show={emitFormErrors.length > 0}>\n          {emitFormErrors.join(', ')}\n        </Alert>\n        <Form.Row className=\"mb-2\">\n          <Col>\n            <Form.Control as=\"select\" value={emitChannel} onChange={(e) => setEmitChannel(e.target.value)}>\n              {eventOptions}\n            </Form.Control>\n          </Col>\n          <Col>\n            <Form.Check type=\"switch\" id=\"is-json\" label=\"JSON data\" value={emitDataJson} onChange={(e) => setEmittDataJson(() => e.target.checked)} placeholder=\"data...\" className=\"pt-3 pl-5\" />\n          </Col>\n        </Form.Row>\n        <Form.Row className=\"mb-2\">\n          <Col>\n            <Form.Control as=\"textarea\" value={emitText} onChange={(e) => setEmitText(e.target.value)} />\n          </Col>\n        </Form.Row>\n        <Form.Row>\n          <Col>\n            <Button variant=\"success\" type=\"submit\" block>Emit</Button>\n          </Col>\n        </Form.Row>\n      </Form>\n\n      <hr />\n      <div className=\"mt-4\">\n        <History data={emitHistory} emitBack={emitData} title=\"Messages\" clearHistory={clearHistory} stack={stack} />\n      </div>\n    </div>\n  );\n}","import History from './history.jsx';\n\nexport default function Ack({ ackHistory, clearHistory }) {\n  return (\n    <History data={ackHistory} title=\"Messages\" stack=\"ack\" clearHistory={clearHistory} />\n  );\n}","import './App.css';\nimport Connection from './components/connection.jsx';\nimport Listen from './components/listen.jsx';\nimport Emitter from './components/emitter.jsx';\nimport Ack from './components/ack.jsx';\nimport { useEffect, useState, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { Container, Row, Col, Modal, Tabs, Tab } from 'react-bootstrap';\nimport { MdCloudDone, MdCloudOff } from 'react-icons/md';\n\n\n\nfunction App() {\n\n  const [socket, setSocket] = useState(null);\n  const [isReady, setIsReady] = useState(false);\n\n  const isReadyRef = useRef();\n  isReadyRef.current = isReady;\n\n  const [connData, setConnData] = useState({\n    connected: false,\n    loading: false,\n    server: 'http://localhost:8080',\n    config: '{\"path\": \"/socket.io\", \"forceNew\": true, \"reconnectionAttempts\": 3, \"timeout\": 2000}',\n    errors: []\n  });\n\n  const [appConfig, setAppConfig] = useState(0);\n  const [eventsToListenFor, setEventsToListenFor] = useState(['socketio-client', 'message']);\n\n  const [listenTo, setListenTo] = useState([]);\n  const [emitTo, setEmitTo] = useState(['socketio-client', 'socketio-client-ack']);\n\n  // Storage\n  const [emitHistory, setEmitHistory] = useState([]);\n  const [listenHistory, setListenHistory] = useState([]);\n  const [ackHistory, setAckHistory] = useState([]);\n\n  const createConnection = (url, config) => {\n    setConnData(() => {\n      return {\n        connected: false,\n        loading: true,\n        socketId: 'connecting..',\n        server: url,\n        config: config,\n        errors: []\n      }\n    });\n    setSocket(() => io(url, JSON.parse(config)));\n  }\n\n  useEffect(() => {\n    if (socket === null) {\n      return;\n    }\n    socket.on(\"connect\", () => {\n      if (isReadyRef.current === true) {\n        return;\n      }\n\n      setConnData(() => {\n        return {\n          connected: true,\n          loading: false,\n          server: connData.url,\n          socketId: socket.id,\n          config: connData.config,\n          errors: []\n        }\n      });\n      addListener(eventsToListenFor);\n      setIsReady(() => true);\n    });\n\n  });\n\n  useEffect(() => {\n\n  }, [listenTo]);\n\n  function addListener(channels) {\n    channels.forEach(channel => {\n      const channelsToAdd = [];\n      if (!listenTo.includes(channel)) {\n        channelsToAdd.push(channel);\n        socket.on(channel, (response) => {\n          console.log(\"data received\", channel, response);\n          const d = new Date();\n          const data = {\n            key: d.toLocaleString(),\n            date: d,\n            channel: channel,\n            data: typeof response === 'string' ? response : JSON.stringify(response, null, 2),\n            dataType: typeof response === 'string' ? 'string' : 'json'\n          };\n          setListenHistory(i => [data, ...i]);\n        });\n      }\n      setListenTo(items => [...channelsToAdd, ...items]);\n    });\n  }\n\n  const addEmitTo = (channel) => {\n    setEmitTo((items) => [channel, ...items]);\n  }\n\n  const emitData = (emitChannel, dataToEmit) => {\n    socket.emit(emitChannel, dataToEmit, (ack) => {\n      const date = new Date();\n      const store = {\n        key: date.toUTCString(),\n        channel: emitChannel,\n        date: date,\n        data: ack,\n        type: typeof ack === 'string' ? 'string' : 'json'\n      }\n      setAckHistory(items => [store, ...items]);\n    });\n    const date = new Date();\n    const store = {\n      key: date.toUTCString(),\n      channel: emitChannel,\n      date: date,\n      data: dataToEmit,\n      type: typeof dataToEmit === 'string' ? 'string' : 'json'\n    }\n    setEmitHistory(items => [store, ...items]);\n  }\n\n  // const histryStackChannelsFilter = (item, channels) => {\n  //   return !channels.includes(item.channel);\n  // }\n\n  function clearHistory(stack, channels) {\n    switch (stack) {\n      case 'emit':\n        setEmitHistory(() => []);\n        break;\n      case 'listen':\n        setListenHistory(items => items.filter(i => !channels.includes(i.channel)));\n        break;\n      case 'ack':\n        setAckHistory(() => []);\n        break;\n      default:\n        break;\n    }\n  }\n\n  useEffect(() => {\n\n    function setHash() {\n      const hashObj = {\n        server: connData.server,\n        listen: listenTo,\n        emit: emitTo,\n        config: connData.config\n      };\n      window.location.hash = window.btoa(JSON.stringify(hashObj));\n    }\n\n    function getHash() {\n      return window.location.hash === \"\" ? false : JSON.parse(window.atob(window.location.hash.split(\"#\")[1]));\n    }\n\n    if (connData.connected) {\n      setHash();\n    } else {\n      const d = getHash();\n\n      if (d !== false && appConfig === 0) { // Has hash value on load\n        setAppConfig(() => 1);\n        if (d.listen.length > 0) {\n          setEventsToListenFor(() => d.listen);\n        }\n        setEmitTo(() => d.emit);\n        setConnData(() => {\n          return {\n            connected: false,\n            loading: false,\n            server: d.server,\n            config: d.config,\n            errors: []\n          };\n        });\n      }\n    }\n  }, [connData.connected, connData.server, connData.config, listenTo, emitTo, appConfig]);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row>\n          <Col className=\"text-right\">\n            <span className=\"small\">\n              ID: <b>{connData.socketId}</b> Server: <b>{connData.server}</b>\n            </span>\n            {connData.connected ? <MdCloudDone className=\"text-success ml-3 h3\" /> : <MdCloudOff className=\"text-danger mx-2 h3\" />}\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <Tabs defaultActiveKey=\"listen\" className=\"mb-4 nav-fillx\">\n              <Tab eventKey=\"listen\" title=\"Listen\">\n                <Listen listeners={listenTo} addListener={addListener} listenHistory={listenHistory} clearHistory={clearHistory} stack=\"listen\" />\n\n              </Tab>\n\n              <Tab eventKey=\"emit\" title=\"Emit\">\n                <Emitter emitToChannels={emitTo} addEmitTo={addEmitTo} emitData={emitData} emitHistory={emitHistory} clearHistory={clearHistory} stack=\"emit\" />\n              </Tab>\n\n              <Tab eventKey=\"ack\" title=\"Ack\">\n                <Ack ackHistory={ackHistory} stack=\"ack\" clearHistory={clearHistory} />\n              </Tab>\n\n            </Tabs>\n          </Col>\n        </Row>\n      </Container>\n\n\n      <Modal show={!(connData.connected)} backdrop=\"static\" centered size=\"lg\">\n\n        <Modal.Header>\n          <Modal.Title>\n            Configure connection\n            </Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Connection eventsToListenFor={eventsToListenFor} emitTo={emitTo} connData={connData} createConnection={createConnection} />\n        </Modal.Body>\n      </Modal>\n    </div >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}